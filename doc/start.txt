The following pointers will help you get started:


=== Dependencies

Required:

* autotools or cmake to build from source

* g\++ >= 4.8 or other recent C++11 compiler

* daq from http://www.snort.org for packet IO

* dnet from https://github.com/dugsong/libdnet.git for network utility functions

* LuaJIT from http://luajit.org for configuration and scripting

* pcap from http://www.tcpdump.org for tcpdump style logging

* pcre from http://www.pcre.org for regular expression pattern matching

* zlib from http://www.zlib.net for decompression

* pkgconfig from http://www.freedesktop.org to build the example plugins

Optional:

* asciidoc from http://www.methods.co.nz/asciidoc/ to build the HTML
  manual

* dblatex from http://dblatex.sourceforge.net to build the pdf manual (in
  addition to asciidoc)

* lzma >= 5.1.2 from http://tukaani.org/xz/ for decompression of SWF fles.

* openssl from https://www.openssl.org for SHA and MD5 file signatures and
  the protected_content rule option.

* w3m from http://sourceforge.net/projects/w3m/ to build the plain text
  manual

* source-highlight from http://www.gnu.org/software/src-highlite/ to
  generate the dev guide.


=== Building

* Optionally built features are listed in the reference section.

* Create an install path:

    export my_path=/path/to/snorty
    mkdir -p $my_path

* If you are using a github clone with autotools, do this:

    autoreconf -isvf

* Now do one of the following:

a. To build with autotools, simply do the usual from the top level directory:

    ./configure --prefix=$my_path
    make -j 8
    make install

b. To build with cmake and make, run configure_cmake.sh.  It will
   automatically create and populate a new subdirectory named 'build'.

    ./configure_cmake.sh --prefix=$my_path
    cd build
    make -j 8
    make install
    ln -s $my_path/conf $my_path/etc

c. You can also specify a cmake project generator:

    ./configure_cmake.sh --generator=Xcode --prefix=$my_path

d. Or use ccmake directly to configure and generate from an arbitrary build
   directory like one of these:

    ccmake -G Xcode /path/to/Snort++/tree
    open snort.xcodeproj

    ccmake -G "Eclipse CDT4 - Unix Makefiles" /path/to/Snort++/tree
    run eclipse and do File > Import > Existing Eclipse Project

* To build with g++ on OS X where clang is installed, do this first:

    export CXX=g++


=== Run

First set up the environment:

    export LUA_PATH=$my_path/include/snort/lua/\?.lua\;\;
    export SNORT_LUA_PATH=$my_path/etc/snort/

Then give it a go:

* Get some help:

    $my_path/bin/snort --help
    $my_path/bin/snort --help-module suppress
    $my_path/bin/snort --help-config | grep thread

* Examine and dump a pcap:

    $my_path/bin/snort -r <pcap>
    $my_path/bin/snort -K text -d -e -q -r <pcap>

* Verify config, with or w/o rules:

    $my_path/bin/snort -c $my_path/etc/snort/snort.lua
    $my_path/bin/snort -c $my_path/etc/snort/snort.lua -R $my_path/etc/snort/sample.rules

* Run IDS mode.  To keep it brief, look at the first n packets in each file:

    $my_path/bin/snort -c $my_path/etc/snort/snort.lua -R $my_path/etc/snort/sample.rules \
        -r <pcap> -A alert_test -n 100000

* Let's suppress 1:2123.  We could edit the conf or just do this:

    $my_path/bin/snort -c $my_path/etc/snort/snort.lua -R $my_path/etc/snort/sample.rules \
        -r <pcap> -A alert_test -n 100000 --lua "suppress = { { gid = 1, sid = 2123 } }"

* Go whole hog on a directory with multiple packet threads:

    $my_path/bin/snort -c $my_path/etc/snort/snort.lua -R $my_path/etc/snort/sample.rules \
        --pcap-filter \*.pcap --pcap-dir <dir> -A alert_fast -n 1000 --max-packet-threads 8

For more examples, see the usage section.


=== Tips

One of the goals of Snort++ is to make it easier to configure your sensor.
Here is a summary of tips and tricks you may find useful.

General Use

* Snort tries hard not to error out too quickly.  It will report multiple
  semantic errors.

* Snort always assumes the simplest mode of operation.  Eg, you can omit the -T
  option to validate the conf if you don't provide a packet source.

* Warnings are not emitted unless --warn-* is specified.  --warn-all enables all
  warnings, and --pedantic makes such warnings fatal.

* You can process multiple sources at one time by using the -z or --max-threads
  option.

* To make it easy to find the important data, zero counts are not output at
  shutdown.

* Load plugins from the command line with --plugin-path /path/to/install/lib.

* You can process multiple sources at one time by using the -z or
  --max-threads option.

* Unit tests are configured with --enable-unit-tests.  They can then be run
  with snort --catch-test [tags]|all.

Lua Configuration

* Configure the wizard and default bindings will be created based on configured
  inspectors.  No need to explicitly bind ports in this case.

* You can override or add to your Lua conf with the --lua command line option.

* The Lua conf is a live script that is executed when loaded.  You can add
  functions, grab environment variables, compute values, etc.

* You can also rename symbols that you want to disable.  For example,
  changing normalizer to  Xnormalizer (an unknown symbol) will disable the
  normalizer.  This can be easier than commenting in some cases.

* By default, symbols unknown to Snort++ are silently ignored.  You can
  generate warnings for them  with --warn-unknown.  To ignore such symbols,
  export them in the environment variable SNORT_IGNORE.

Writing and Loading Rules

Snort++ rules allow arbitrary whitespace.  Multi-line rules make it easier to
structure your rule  for clarity.  There are multiple ways to add comments to
your rules:

* Like Snort, the # character starts a comment to end of line.  In addition, all
  lines between #begin and #end are comments.

* The rem option allows you to write a comment that is conveyed with the rule.

* C style multi-line comments are allowed, which means you can comment out
  portions of a rule while  testing it out by putting the options between /* and
  */.

There are multiple ways to load rules too:

* Set ips.rules or ips.include.

* Snort 2.X include statements can be used in rules files.

* Use -R to load a rules file.

* Use --stdin-rules with command line redirection.

* Use --lua to specify one or more rules as a command line argument.

Output Files

To make it simple to configure outputs when you run with multiple packet
threads, output files are not explicitly configured.  Instead, you can use the
options below to format the paths:

    <logdir>/[<run_prefix>][<id#>][<X>]<name>

* logdir is set with -l and defaults to ./

* run_prefix is set with --run-prefix else not used

* id# is the packet thread number that writes the file; with one packet thread,
  id# (zero) is omitted without --id-zero

* X is / if you use --id-subdir, else _ if id# is used

* name is based on module name that writes the file

* all text mode outputs default to stdout


=== Help

----
include::help.txt[]
----


=== Common Errors

include::errors.txt[]


=== Gotchas

* A nil key in a table will not caught.  Neither will a nil value in a
  table.  Neither of the following will cause errors, nor will they 
  actually set http_server.post_depth:

    http_server = { post_depth }
    http_server = { post_depth = undefined_symbol }

* It is not an error to set a value multiple times.  The actual value
  applied may not be the last in the table either.  It is best to avoid
  such cases.

    http_server =
    {
        post_depth = 1234,
        post_depth = 4321
    }

* Snort can't tell you the exact filename or line number of a semantic
  error but it will tell you the fully qualified name.

* The dump DAQ will not work with multiple threads unless you use --daq-var
  file=/dev/null.  This will be fixed in at some point to use the Snort log
  directory, etc.

* Variables are currently processed in an order determined by the Lua hash
  table which is effectively random.  That means you will need to use Lua
  string concatenation to ensure Snort doesn't try to use a variable before
  it is defined (even when it is defined ahead of use in the file):

  -- this may fail:
  MY_SERVERS = [[ 172.20.0.0/16 172.21.0.0/16 ]]
  EXTERNAL_NET = '!$MY_SERVERS'

  -- this will work:
  MY_SERVERS = [[ 172.20.0.0/16 172.21.0.0/16 ]]
  EXTERNAL_NET = '!' .. MY_SERVERS


=== Bugs

include::bugs.txt[]

