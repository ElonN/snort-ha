
=== arp


What: support for address resolution protocol

Type: codec

Rules: 

* *116:109* (arp) truncated ARP

=== auth


What: support for IP authentication header

Type: codec

Rules: 

* *116:465* (auth) truncated authentication header
* *116:466* (auth) bad authentication header length

=== eapol


What: support for extensible authentication protocol over LAN

Type: codec

Rules: 

* *116:110* (eapol) truncated EAP header
* *116:111* (eapol) EAP key truncated
* *116:112* (eapol) EAP header truncated

=== erspan2


What: support for encapsulated remote switched port analyzer - type 2

Type: codec

Rules: 

* *116:462* (erspan2) ERSpan header version mismatch
* *116:463* (erspan2) captured < ERSpan type2 header length

=== erspan3


What: support for encapsulated remote switched port analyzer - type 3

Type: codec

Rules: 

* *116:464* (erspan3) captured < ERSpan type3 header length

=== esp


What: support for encapsulating security payload

Type: codec

Configuration: 

* bool *esp.decode_esp* = false: enable for inspection of esp traffic that has authentication but not encryption

Rules: 

* *116:294* (esp) truncated encapsulated security payload header

=== eth


What: support for ethernet protocol (DLT 1) (DLT 51)

Type: codec

Rules: 

* *116:424* (eth) truncated eth header

=== fabricpath


What: support for fabricpath

Type: codec

Rules: 

* *116:467* (fabricpath) truncated FabricPath header

=== gre


What: support for generic routing encapsulation

Type: codec

Rules: 

* *116:160* (gre) GRE header length > payload length
* *116:161* (gre) multiple encapsulations in packet
* *116:162* (gre) invalid GRE version
* *116:163* (gre) invalid GRE header
* *116:164* (gre) invalid GRE v.1 PPTP header
* *116:165* (gre) GRE trans header length > payload length

=== gtp


What: support for general-packet-radio-service tunnelling protocol

Type: codec

Rules: 

* *116:297* (gtp) two or more GTP encapsulation layers present
* *116:298* (gtp) GTP header length is invalid

=== icmp4


What: support for Internet control message protocol v4

Type: codec

Rules: 

* *116:105* (icmp4) ICMP header truncated
* *116:106* (icmp4) ICMP timestamp header truncated
* *116:107* (icmp4) ICMP address header truncated
* *116:250* (icmp4) ICMP original IP header truncated
* *116:251* (icmp4) ICMP version and original IP header versions differ
* *116:252* (icmp4) ICMP original datagram length < original IP header length
* *116:253* (icmp4) ICMP original IP payload < 64 bits
* *116:254* (icmp4) ICMP original IP payload > 576 bytes
* *116:255* (icmp4) ICMP original IP fragmented and offset not 0
* *116:415* (icmp4) ICMP4 packet to multicast dest address
* *116:416* (icmp4) ICMP4 packet to broadcast dest address
* *116:418* (icmp4) ICMP4 type other
* *116:434* (icmp4) ICMP ping NMAP
* *116:435* (icmp4) ICMP icmpenum v1.1.1
* *116:436* (icmp4) ICMP redirect host
* *116:437* (icmp4) ICMP redirect net
* *116:438* (icmp4) ICMP traceroute ipopts
* *116:439* (icmp4) ICMP source quench
* *116:440* (icmp4) broadscan smurf scanner
* *116:441* (icmp4) ICMP destination unreachable communication administratively prohibited
* *116:442* (icmp4) ICMP destination unreachable communication with destination host is administratively prohibited
* *116:443* (icmp4) ICMP destination unreachable communication with destination network is administratively prohibited
* *116:451* (icmp4) ICMP path MTU denial of service attempt
* *116:452* (icmp4) BAD-TRAFFIC Linux ICMP header DOS attempt
* *116:426* (icmp4) truncated ICMP4 header

Peg counts: 

* *icmp4.bad checksum*: non-zero icmp checksums

=== icmp6


What: support for Internet control message protocol v6

Type: codec

Rules: 

* *116:427* (icmp6) truncated ICMP6 header
* *116:431* (icmp6) ICMP6 type not decoded
* *116:432* (icmp6) ICMP6 packet to multicast address
* *116:285* (icmp6) ICMPv6 packet of type 2 (message too big) with MTU field < 1280
* *116:286* (icmp6) ICMPv6 packet of type 1 (destination unreachable) with non-RFC 2463 code
* *116:287* (icmp6) ICMPv6 router solicitation packet with a code not equal to 0
* *116:288* (icmp6) ICMPv6 router advertisement packet with a code not equal to 0
* *116:289* (icmp6) ICMPv6 router solicitation packet with the reserved field not equal to 0
* *116:290* (icmp6) ICMPv6 router advertisement packet with the reachable time field set > 1 hour
* *116:457* (icmp6) ICMPv6 packet of type 1 (destination unreachable) with non-RFC 4443 code
* *116:460* (icmp6) ICMPv6 node info query/response packet with a code greater than 2

Peg counts: 

* *icmp6.bad checksum (ip4)*: nonzero ipcm4 checksums
* *icmp6.bad checksum (ip6)*: nonzero ipcm6 checksums

=== igmp


What: support for Internet group management protocol

Type: codec

Rules: 

* *116:455* (igmp) DOS IGMP IP options validation attempt

=== ipv4


What: support for Internet protocol v4

Type: codec

Rules: 

* *116:1* (ipv4) Not IPv4 datagram
* *116:2* (ipv4) hlen < minimum
* *116:3* (ipv4) IP dgm len < IP Hdr len
* *116:4* (ipv4) Ipv4 Options found with bad lengths
* *116:5* (ipv4) Truncated Ipv4 Options
* *116:6* (ipv4) IP dgm len > captured len
* *116:404* (ipv4) IPV4 packet with zero TTL
* *116:405* (ipv4) IPV4 packet with bad frag bits (both MF and DF set)
* *116:407* (ipv4) IPV4 packet frag offset + length exceed maximum
* *116:408* (ipv4) IPV4 packet from 'current net' source address
* *116:409* (ipv4) IPV4 packet to 'current net' dest address
* *116:410* (ipv4) IPV4 packet from multicast source address
* *116:411* (ipv4) IPV4 packet from reserved source address
* *116:412* (ipv4) IPV4 packet to reserved dest address
* *116:413* (ipv4) IPV4 packet from broadcast source address
* *116:414* (ipv4) IPV4 packet to broadcast dest address
* *116:428* (ipv4) IPV4 packet below TTL limit
* *116:430* (ipv4) IPV4 packet both DF and offset set
* *116:448* (ipv4) BAD-TRAFFIC IP reserved bit set
* *116:444* (ipv4) MISC IP option set
* *116:425* (ipv4) truncated IP4 header

Peg counts: 

* *ipv4.bad checksum*: nonzero ip checksums

=== ipv6


What: support for Internet protocol v6

Type: codec

Rules: 

* *116:270* (ipv6) IPv6 packet below TTL limit
* *116:271* (ipv6) IPv6 header claims to not be IPv6
* *116:272* (ipv6) IPV6 truncated extension header
* *116:273* (ipv6) IPV6 truncated header
* *116:274* (ipv6) IP dgm len < IP Hdr len
* *116:275* (ipv6) IP dgm len > captured len
* *116:276* (ipv6) IPv6 packet with destination address ::0
* *116:277* (ipv6) IPv6 packet with multicast source address
* *116:278* (ipv6) IPv6 packet with reserved multicast destination address
* *116:279* (ipv6) IPv6 header includes an undefined option type
* *116:280* (ipv6) IPv6 address includes an unassigned multicast scope value
* *116:281* (ipv6) IPv6 header includes an invalid value for the 'next header' field
* *116:282* (ipv6) IPv6 header includes a routing extension header followed by a hop-by-hop header
* *116:283* (ipv6) IPv6 header includes two routing extension headers
* *116:292* (ipv6) IPv6 header has destination options followed by a routing header
* *116:291* (ipv6) IPV6 tunneled over IPv4, IPv6 header truncated, possible Linux kernel attack
* *116:295* (ipv6) IPv6 header includes an option which is too big for the containing header
* *116:296* (ipv6) IPv6 packet includes out-of-order extension headers
* *116:429* (ipv6) IPV6 packet has zero hop limit
* *116:453* (ipv6) BAD-TRAFFIC ISATAP-addressed IPv6 traffic spoofing attempt
* *116:458* (ipv6) bogus fragmentation packet, possible BSD attack
* *116:461* (ipv6) IPV6 routing type 0 extension header
* *116:456* (ipv6) too many IP6 extension headers

=== mpls


What: support for multiprotocol label switching

Type: codec

Configuration: 

* bool *mpls.enable_mpls_multicast* = false: enables support for MPLS multicast
* bool *mpls.enable_mpls_overlapping_ip* = false: enable if private network addresses overlap and must be differentiated by MPLS label(s)
* int *mpls.max_mpls_stack_depth* = -1: set MPLS stack depth { -1: }
* enum *mpls.mpls_payload_type* = ip4: set encapsulated payload type { eth | ip4 | ip6 }

Rules: 

* *116:170* (mpls) bad MPLS frame
* *116:171* (mpls) MPLS label 0 appears in non-bottom header
* *116:172* (mpls) MPLS label 1 appears in bottom header
* *116:173* (mpls) MPLS label 2 appears in non-bottom header
* *116:174* (mpls) MPLS label 3 appears in header
* *116:175* (mpls) MPLS label 4, 5,.. or 15 appears in header
* *116:176* (mpls) too many MPLS headers

=== pgm


What: support for pragmatic general multicast

Type: codec

Rules: 

* *116:454* (pgm) BAD-TRAFFIC PGM nak list overflow attempt

=== pppoe


What: support for point-to-point protocol over ethernet

Type: codec

Rules: 

* *116:120* (pppoe) bad PPPOE frame detected

=== tcp


What: support for transmission control protocol

Type: codec

Rules: 

* *116:45* (tcp) TCP packet len is smaller than 20 bytes
* *116:46* (tcp) TCP data offset is less than 5
* *116:47* (tcp) TCP header length exceeds packet length
* *116:54* (tcp) TCP options found with bad lengths
* *116:55* (tcp) truncated TCP options
* *116:56* (tcp) T/TCP detected
* *116:57* (tcp) obsolete TCP options found
* *116:58* (tcp) experimental TCP options found
* *116:59* (tcp) TCP window scale option found with length > 14
* *116:400* (tcp) XMAS attack detected
* *116:401* (tcp) Nmap XMAS attack detected
* *116:419* (tcp) TCP urgent pointer exceeds payload length or no payload
* *116:420* (tcp) TCP SYN with FIN
* *116:421* (tcp) TCP SYN with RST
* *116:422* (tcp) TCP PDU missing ack for established session
* *116:423* (tcp) TCP has no SYN, ACK, or RST
* *116:433* (tcp) DDOS shaft SYN flood
* *116:446* (tcp) BAD-TRAFFIC TCP port 0 traffic
* *116:402* (tcp) DOS NAPTHA vulnerability detected
* *116:403* (tcp) bad traffic SYN to multicast address

Peg counts: 

* *tcp.bad checksum (ip4)*: nonzero tcp over ip checksums
* *tcp.bad checksum (ip6)*: nonzero tcp over ipv6 checksums

=== token_ring


What: support for token ring decoding

Type: codec

Rules: 

* *116:140* (token_ring) (token_ring) Bad Token Ring Header
* *116:141* (token_ring) (token_ring) Bad Token Ring ETHLLC Header
* *116:142* (token_ring) (token_ring) Bad Token Ring MRLENHeader
* *116:143* (token_ring) (token_ring) Bad Token Ring MR Header

=== udp


What: support for user datagram protocol

Type: codec

Configuration: 

* bool *udp.deep_teredo_inspection* = false: look for Teredo on all UDP ports (default is only 3544)
* bool *udp.enable_gtp* = false: decode GTP encapsulations
* bit_list *udp.gtp_ports* = 2152 3386: set GTP ports { 65535 }

Rules: 

* *116:95* (udp) truncated UDP header
* *116:96* (udp) invalid UDP header, length field < 8
* *116:97* (udp) short UDP packet, length field > payload length
* *116:98* (udp) long UDP packet, length field < payload length
* *116:406* (udp) invalid IPv6 UDP packet, checksum zero
* *116:445* (udp) misc large UDP Packet
* *116:447* (udp) BAD-TRAFFIC UDP port 0 traffic

Peg counts: 

* *udp.bad checksum (ip4)*: nonzero udp over ipv4 checksums
* *udp.bad checksum (ip6)*: nonzero udp over ipv6 checksums

=== vlan


What: support for local area network

Type: codec

Rules: 

* *116:130* (vlan) bad VLAN frame
* *116:131* (vlan) bad LLC header
* *116:132* (vlan) bad extra LLC info

=== wlan


What: support for wireless local area network protocol (DLT 105)

Type: codec

Rules: 

* *116:133* (wlan) bad 802.11 LLC header
* *116:134* (wlan) bad 802.11 extra LLC info
