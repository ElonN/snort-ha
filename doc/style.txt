All new code should try to follow these style guidelines.  These are not
yet firm so feedback is welcome to get something we can live with.

=== General

* Generally try to follow
  http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml, 
  but there are a few differences.

* Each source directory should have a dev_notes.txt file summarizing the
  key points for the code in that directory.  These are built into the
  developers guide.

=== Naming

* Use camel case for namespaces, classes, and types like WhizBangPdfChecker.

* Use lower case identifiers with underscore separators, e.g. some_function()
  and my_var.

* Use lower case filenames with underscores.

=== Comments

* Write comments sparingly with a mind towards future proofing.  Often the
  comments can be obviated with better code.  Clear code is better than a
  comment.

* Function comment blocks are generally just noise that quickly becomes
  obsolete.  If you absolutely must comment on parameters, put each on a
  separate line along with the comment.  That way changing the signature
  may prompt a change to the comments too.

* Use FIXIT (not FIXTHIS or TODO or whatever) to mark things left for a
  day or even just a minute.  That way we can find them easily and won't
  lose track of them.

* Presently using FIXIT-X where X = P | H | M | L, indicating perf, high,
  med, or low priority.  For now, H, M, or L can indicate alpha 1, 2, or 3.
  Perf changes fall between alpha 1 and 2.

* Put the copyright(s) and license in a comment block at the top of each
  source file (.h and .cc).  Don't bother with trivial scripts and make
  foo.  Some interesting Lua code should get a comment block too.  Copy and
  paste exactly from src/main.h (don't reformat).

* Put author, description, etc. in separate comment(s) following the
  license.  Do not put such comments in the middle of the license foo.
  Be sure to put the author line ahead of the header guard to exclude them
  from the developers guide.

* Each header should have a comment immediately after the header guard to
  give an overview of the file so the user knows what's going on.

=== Logging

* Messages intended for the user should not look like debug messages. Eg,
  the function name should not be included.

* Most debug messages should just be deleted.

* Don't bang your error messages (no !).  The user feels bad enough about the
  problem already w/o you shouting at him.

=== Types

* Use logical types to make the code clearer and to help the compiler catch
  problems.  typedef uint16_t Port; bool foo(Port) is way better than
  int foo(int port).

* Use forward declarations (e.g. struct SnortConfig;) instead of void*.

* Try not to use extern data unless absolutely necessary and then put the
  extern in an appropriate header.

* Use const liberally.  In most cases, const char* s = "foo" should be
  const char* const s = "foo".  The former goes in the initialized data
  section and the latter in read only data section.

* But use const char s[] = "foo" instead of const char* s = "foo" when
  possible.  The latter form allocates a pointer variable and the data
  while the former allocates only the data.

* Use static wherever possible to minimize public symbols and eliminate
  unneeded relocations.

* Declare functions virtual only in the parent class introducing the
  function (not in a derived class that is overriding the function).
  This makes it clear which class introduces the function.

* Declare functions as override if they are intended to override a
  function.  This makes it possible to find derived implementations that
  didn't get updated and therefore won't get called due a change in the
  parent signature.

* Use bool functions instead of int unless there is truly a need for
  multiple error returns.  The C-style use of zero for success and -1 for
  error is less readable and often leads to messy code that either ignores
  the various errors anyway or needlessly and ineffectively tries to do
  something aobut them.

=== Macros (aka defines)

* In many cases, even in C++, use #define name "value" instead of a
  const char* const name = "value" because it will eliminate a symbol from
  the binary.
  
* Use inline functions instead of macros where possible (pretty much all
  cases except where stringification is necessary).  Functions offer better
  typing, avoid re-expansions, and a debugger can break there.

* All macros except simple const values should be wrapped in () and all
  args should be wrapped in () too to avoid surprises upon expansion.
  Example:

    #define SEQ_LT(a,b)  ((int)((a) - (b)) <  0)

* Multiline macros should be blocked (i.e. inside { }) to avoid if-else type
  surprises.

=== Formatting

* Indent 4 space chars ... no tabs!

* If you need to indent many times, something could be rewritten or
  restructured to make it clearer.  Fewer indents is generally easier to
  write, easier to read, and overall better code.

* Braces go on the line immediately following a new scope (function
  signature, if, else, loop, switch, etc.

* Use consistent spacing and line breaks.  Always indent 4 spaces from the
  breaking line.  Keep lines less than 100 chars; it greatly helps
  readability.

    No:
        calling_a_func_with_a_long_name(arg1,
                                        arg2,
                                        arg3);

    Yes:
        calling_a_func_with_a_long_name(
            arg1, arg2, arg3);

* Put function signature on one line, except when breaking for the arg
  list:

    No:
        inline
        bool foo()
        { // ...

    Yes:
        inline bool foo()
        { // ...

* Put conditional code on the line following the if so it is easy to break
  on the conditional block:

  No:
      if ( test ) foo();

  Yes:
      if ( test )
          foo();

=== Headers

* Don't hesitate to create a new header if it is needed.  Don't lump
  unrelated stuff into an header because it is convenient.

* Write header guards like this (leading underscores are reserved for
  system stuff).  In my_header.h:

    #ifndef MY_HEADER_H
    #define MY_HEADER_H
    // ...
    #endif

* Includes from a different directory should specify parent directory.
  This makes it clear exactly what is included and avoids the primordial
  soup that results from using -I this -I that -I the_other_thing ... .

    // given:
    src/foo/foo.cc
    src/bar/bar.cc
    src/bar/baz.cc

    // in baz.cc
    #include "bar.h"

    // in foo.cc
    #include "bar/bar.h"

* Includes within installed headers should specify parent directory.

* Just because it is a #define doesn't mean it goes in a header.
  Everything should be scoped as tightly as possible.  Shared
  implementation declarations should go in a separate header from the
  interface.  And so on.

* A .cc should include its own .h before any others (including
  system headers).  This ensures that the header stands on its own and can
  be used by clients without include prerequisites.

* Include required headers, all required headers, and nothing but required
  headers.  Don't just clone a bunch of headers because it is convenient.

* Any file depending of #ifdefs should include config.h as shown below.  A
  .h should include it before any other includes, and a .cc should include
  it immediately after the include of its own .h.

    #ifdef HAVE_CONFIG_H
    #include "config.h"
    #endif

* Do not put using statements in headers.

=== Warnings

* With g++, use at least these compiler flags:

    -Wall -Wextra -pedantic -Wformat -Wformat-security
    -Wunused-but-set-variable -Wno-deprecated-declarations

* With clang, use at least these compiler flags:

    -Wall -Wextra -pedantic -Wformat -Wformat-security
    -Wno-deprecated-declarations

* Then Fix All Warnings.  None Allowed.

=== Other

* Prefer 'and' over && and 'or' over || for new source files.

=== Uncrustify

Currently using uncrustify from at https://github.com/bengardner/uncrustify
to reformat legacy code and anything that happens to need a makeover at
some point.

The working config is crusty.cfg in the top level directory.  It does well
but will munge some things.  Specially formatted INDENT-OFF comments were
added in 2 places to avoid a real mess.

